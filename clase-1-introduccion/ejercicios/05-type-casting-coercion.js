// ğŸ§  Tema: Type Casting y Type Coercion

// Instrucciones:
// - LeÃ© cada paso y completÃ¡ el cÃ³digo.
// - ObservÃ¡ los resultados en consola y tratÃ¡ de entender quÃ© hizo JS.
// - EjecutÃ¡ este archivo con: node 05-type-casting-coercion.js

//--------------------------------------------------
// 1. Type Casting (ConversiÃ³n explÃ­cita)
//--------------------------------------------------

// ğŸ‘‰ Paso 1: Convertir un nÃºmero a string usando String()
// let numero = 
// let numeroComoTexto = 


// ğŸ‘‰ Paso 2: Convertir un string de numeros a nÃºmero usando Number()
//  let texto = 
//  let textoComoNumero = 

// ğŸ‘‰ Paso 3: Mostrar los tipos con typeof


//--------------------------------------------------
// 2. Casos prÃ¡cticos de Casting
//--------------------------------------------------

// ğŸ‘‰ Paso 4: Convertir un string que NO es un nÃºmero y ver quÃ© pasa
//  let textoInvalido = 
//  let resultado =
//  console.log(resultado) // Â¿QuÃ© muestra?

// ğŸ‘‰ Paso 5: Convertir un valor booleano a nÃºmero
//  let valorBooleano =
//  let valorComoNumero =
//  console.log(valorComoNumero) // Â¿QuÃ© muestra?

// ğŸ‘‰ Paso 6: Convertir un valor null a nÃºmero
//  let valorNulo = 
//  let nuloComomNumero =
//  console.log(nuloComomNumero) // Â¿QuÃ© muestra?

//--------------------------------------------------
// 3. Type Coercion (ConversiÃ³n implÃ­cita)
//--------------------------------------------------

// ğŸ‘‰ Paso 7: AnalizÃ¡ el resultado de estas operaciones (no modifiques, solo descomentÃ¡ una por una)

//  console.log("5" + 2)   // Coercion a string
//  console.log("5" - 2)   // Coercion a nÃºmero
//  console.log(true + 1)  // Coercion de boolean a nÃºmero
//  console.log(false + "3") // Coercion a string
//  console.log(null + 1)  // null se convierte en 0
//  console.log(undefined + 1) // undefined â†’ NaN

//--------------------------------------------------
// 4. DescomentÃ¡ la opciÃ³n correcta
//--------------------------------------------------

// ğŸ‘‰ Paso 8: Â¿QuÃ© devuelve la expresiÃ³n "10" + 5?
// const resultado1 = "105"
// const resultado1 = 15
//  const resultado1 = "15"

// ğŸ‘‰ Paso 9: Â¿QuÃ© devuelve la expresiÃ³n "10" - 5?
// const resultado2 = "5"
// const resultado2 = 5
// const resultado2 = "105"

// ğŸ‘‰ Paso 10: Â¿QuÃ© devuelve la expresiÃ³n Number("123abc")?
// const resultado3 = 123
// const resultado3 = NaN
// const resultado3 = "123abc"

// ğŸ‘‰ Paso 11: Â¿QuÃ© devuelve la expresiÃ³n Boolean(0)?
// const resultado4 = true
// const resultado4 = false
// const resultado4 = null

// ğŸ‘‰ Paso 12: Â¿QuÃ© devuelve la expresiÃ³n Boolean("false")?
// const resultado5 = true
// const resultado5 = false
// const resultado5 = "false"

//--------------------------------------------------
// 5. Casos especiales - DescomentÃ¡ y observÃ¡ los resultados
//--------------------------------------------------

// ğŸ‘‰ Paso 13: Valores que se convierten a false en contexto booleano
// console.log(Boolean(""))      // String vacÃ­o
// console.log(Boolean(0))       // NÃºmero cero
// console.log(Boolean(null))    // Valor nulo
// console.log(Boolean(undefined)) // Valor indefinido
// console.log(Boolean(NaN))     // Not a Number

// ğŸ‘‰ Paso 14: Valores que se convierten a true en contexto booleano
// console.log(Boolean("hola"))  // String no vacÃ­o
// console.log(Boolean(42))      // NÃºmero distinto de cero
// console.log(Boolean([]))      // Array vacÃ­o
// console.log(Boolean({}))      // Objeto vacÃ­o
// console.log(Boolean(function(){})) // FunciÃ³n

//--------------------------------------------------
// 6. ReflexiÃ³n (comentÃ¡ tu respuesta acÃ¡ abajo)
//--------------------------------------------------

// ğŸ‘‰ Â¿QuÃ© diferencias notaste entre casting y coercion?

// ğŸ‘‰ Â¿Por quÃ© crees que JavaScript convierte los tipos automÃ¡ticamente?

// ğŸ‘‰ Â¿QuÃ© problemas podrÃ­a causar la coerciÃ³n de tipos en un programa?

