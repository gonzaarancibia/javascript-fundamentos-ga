// ğŸ§  Tema: Tipos de datos

// Instrucciones:
// - LeÃ© cada paso con atenciÃ³n y escribÃ­ tu cÃ³digo donde se indica.
// - UsÃ¡ `typeof` para verificar el tipo de dato cuando se pida.
// - EjecutÃ¡ este archivo con el comando: node 02-tipos-de-datos.js

//--------------------------------------------------
// 1. Tipos de datos primitivos
//--------------------------------------------------

// ğŸ‘‰ Paso 1: Crear una variable "nombre" de tipo string

// ğŸ‘‰ Paso 2: Crear una variable "edad" de tipo number

// ğŸ‘‰ Paso 3: Crear una variable "esEstudiante" de tipo boolean

// ğŸ‘‰ Paso 4: Crear una variable "direccion" sin valor (undefined)

// ğŸ‘‰ Paso 5: Crear una variable "nulo" con valor null

// ğŸ‘‰ Paso 6: MostrÃ¡ en consola el tipo de cada variable usando typeof

//--------------------------------------------------
// 2. Tipo NaN (Not a Number)
//--------------------------------------------------

// ğŸ‘‰ Paso 7: IntentÃ¡ convertir una palabra a nÃºmero usando Number()

// ğŸ‘‰ Paso 8: MostrÃ¡ en consola si el resultado es NaN usando isNaN()


//--------------------------------------------------
// 3. Tipos de datos complejos
//--------------------------------------------------

// ğŸ‘‰ Paso 9: Crear un array con al menos 3 elementos que sean colores

// ğŸ‘‰ Paso 10: Crear un objeto "persona" con propiedades: nombre, edad y ciudad

// ğŸ‘‰ Paso 11: MostrÃ¡ en consola el tipo de ambos con typeof
// Â¿QuÃ© tipo devuelve typeof en un array?

//--------------------------------------------------
// 4. ComparaciÃ³n de tipos
//--------------------------------------------------

// ğŸ‘‰ Paso 12: Crear dos variables:
//  let numero = 5
//  let texto = '5'

// ğŸ‘‰ Paso 13: ComparÃ¡ ambas usando == y luego usando ===
// MostrÃ¡ en consola ambos resultados y explicÃ¡ la diferencia en un comentario (investiga sobre el operador de igualdad)


//--------------------------------------------------
// 5. Preguntas conceptuales - DescomentÃ¡ la opciÃ³n correcta
//--------------------------------------------------

// ğŸ‘‰ Paso 14: Â¿CÃ³mo representarÃ­as un vehÃ­culo en JavaScript?
// const representacionVehiculo = 'objeto'
// const representacionVehiculo = 'array'
// const representacionVehiculo = 'string'

// ğŸ‘‰ Paso 15: Â¿QuÃ© estructura usarÃ­as para almacenar una lista de compras?
// const estructuraListaCompras = 'objeto'
// const estructuraListaCompras = 'array'
// const estructuraListaCompras = 'string'

// ğŸ‘‰ Paso 16: Â¿QuÃ© tipo de dato usarÃ­as para representar si un usuario estÃ¡ logueado?
// const tipoUsuarioLogueado = 'string'
// const tipoUsuarioLogueado = 'number'
// const tipoUsuarioLogueado = 'boolean'

// ğŸ‘‰ Paso 17: Â¿QuÃ© tipo de dato usarÃ­as para guardar el precio de un producto?
// const tipoPrecioProducto = 'string'
// const tipoPrecioProducto = 'number'
// const tipoPrecioProducto = 'boolean'

// ğŸ‘‰ Paso 18: Â¿QuÃ© estructura usarÃ­as para representar los datos de un formulario de contacto?
// const estructuraFormulario = 'array'
// const estructuraFormulario = 'objeto'
// const estructuraFormulario = 'number'

//--------------------------------------------------
// 6. CaracterÃ­sticas de tipos de datos - DescomentÃ¡ la opciÃ³n correcta
//--------------------------------------------------

// ğŸ‘‰ Paso 19: DescomentÃ¡ la caracterÃ­stica correcta para cada tipo de dato.

// Los strings en JavaScript:
// const caracteristicaString = 'Son mutables (se pueden modificar despuÃ©s de creados)'
// const caracteristicaString = 'Son inmutables (no se pueden modificar despuÃ©s de creados)'
// const caracteristicaString = 'Solo pueden contener letras'

// Los arrays en JavaScript:
// const caracteristicaArray = 'Solo pueden contener elementos del mismo tipo'
// const caracteristicaArray = 'Tienen un tamaÃ±o fijo que no se puede cambiar'
// const caracteristicaArray = 'Pueden contener elementos de diferentes tipos'

// Los nÃºmeros en JavaScript:
// const caracteristicaNumero = 'Distinguen entre enteros y decimales como tipos diferentes'
// const caracteristicaNumero = 'Son todos del mismo tipo (no hay distinciÃ³n entre enteros y decimales)'
// const caracteristicaNumero = 'Solo pueden ser positivos'

// Los objetos en JavaScript:
// const caracteristicaObjeto = 'Se accede a sus propiedades solo con notaciÃ³n de corchetes'
// const caracteristicaObjeto = 'No pueden contener funciones como valores'
// const caracteristicaObjeto = 'Se pueden agregar o eliminar propiedades despuÃ©s de creados'

// Los booleanos en JavaScript:
// const caracteristicaBoolean = 'Solo pueden ser true o false'
// const caracteristicaBoolean = 'Pueden tener tres valores: true, false o maybe'
// const caracteristicaBoolean = 'Son lo mismo que los nÃºmeros 1 y 0'

// ğŸ‘‰ Paso 20: MostrÃ¡ en consola al menos dos de estas variables.

// Preguntas para reflexionar (no hace falta responder con cÃ³digo)
//--------------------------------------------------
// - Â¿CuÃ¡l es la diferencia entre undefined y null?
// - Â¿Por quÃ© typeof null devuelve "object"? (InvestigÃ¡ sobre este "bug" histÃ³rico)
// - Â¿En quÃ© situaciones usarÃ­as un array y en cuÃ¡les un objeto?
